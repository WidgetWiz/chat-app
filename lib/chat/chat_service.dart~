import 'package:chat_app/models/message.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class ChatService {
  // Get instance of Firestore
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  // Get user stream
  Stream<List<Map<String, dynamic>>> getUserStream() {
    return _firestore.collection('Users').snapshots().map((snapshot) {
      // Map each document to its data as a map
      return snapshot.docs.map((doc) {
        final user = doc.data();
        return user;
      }).toList();
    });
  }

  //send messages
  Future<void> sendMessage(String recieverID, message) async {
    //get currunt user info
    final String curruntUserID = _auth.currentUser!.uid;
    final String curruntUserEmail = _auth.currentUser!.email!;
    final Timestamp timestamp = Timestamp.now();

    //create new message
    Message newMessage = Message(
      senderID: curruntUserID,
      senderEmail: curruntUserEmail,
      receiverID: recieverID,
      message: message,
      timestamp: timestamp.toString(),
    );
    //construct chat ID
    List<String> ids = [curruntUserID, recieverID];
    ids.sort();
    String chatRoomID = ids.join('-');
//add new message to firestroe
    await _firestore
        .collection('chat_rooms')
        .doc(chatRoomID)
        .collection("messages")
        .add(newMessage.toMap());
  }

  //get messages
  Stream<QuerySnapshot> getMessages(String userID, otherUserID) {
    //construct chat id
    List<String> ids = [userID, otherUserID];
    ids.sort();
    String chatRoomID = ids.join('-');

    return _firestore
        .collection('chat_rooms')
        .doc(chatRoomID)
        .collection("messages")
        .orderBy('timestamp')
        .snapshots();
  }
}
